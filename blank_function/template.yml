# Dragons App
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Lambda application that calls the Lambda API.
# -----------------------
Parameters:
# -----------------------
  BucketNamePrefix:
    Type: String
    Description: "S3 Bucket prefix"
    Default: dragon-sample-data
# -----------------------
Resources:
# -----------------------
  StateMachineRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "sts:AssumeRole"
                Effect: Allow
                Principal:
                  Service: "states.amazonaws.com"
          Policies:
            - PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Action:
                      - "lambda:InvokeFunction"
                    Resource: "*"
                    Effect: Allow
                    Sid: InvokeLambda
              PolicyName: InvokeLambda
            - PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Action:
                      - "sqs:SendMessage"
                    Resource:
                      Fn::Sub: "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
                    Effect: Allow
                    Sid: InvokeSQS
              PolicyName: InvokeSQS
            - PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Action:
                      - "states:StartExecution"
                    Resource:
                      Fn::Sub: "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
                    Effect: Allow
                    Sid: StepFunctionStartExecution
              PolicyName: StepFunctionStartExecution
            - PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Action:
                      - "SNS:Publish"
                    Resource: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*"
                    Effect: Allow
                    Sid: SNSPolicy
              PolicyName: SNSPolicy
# -----------------------
  MainDragon:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: MainDragon/.
      MemorySize: 128
      Timeout: 10
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AmazonS3FullAccess
        - AmazonSSMReadOnlyAccess
      Tracing: Active
      Layers:
        - !Ref libs
# -----------------------
  ValidateDragon:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: ValidateDragon/.
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${BucketNamePrefix}-495-117"
          FILE_NAME: DragonData.json
          STATE_MACHINE: !GetAtt DragonsStateMachine.Arn
      Timeout: 10
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AmazonS3FullAccess
        - AmazonSSMReadOnlyAccess
        - AWSStepFunctionsFullAccess
      Tracing: Active
      Layers:
        - !Ref libs
# -----------------------
  AddDragon:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: AddDragon/.
      MemorySize: 128
      Timeout: 10
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AmazonS3FullAccess
        - AmazonSSMReadOnlyAccess
      Tracing: Active
      Layers:
        - !Ref libs
# -----------------------
  ListDragons:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: ListDragons/.
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${BucketNamePrefix}-495-117"
          FILE_NAME: DragonData.json
      MemorySize: 128
      Timeout: 10
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - AmazonS3FullAccess
        - AmazonSSMReadOnlyAccess
      Tracing: Active
      Layers:
        - !Ref libs
# -----------------------
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: blank-python-lib
      Description: Dependencies for the blank-python sample app.
      ContentUri: package/.
      CompatibleRuntimes:
        - python3.9
# -----------------------
  DragonsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: DragonsStateMachine
      RoleArn: !GetAtt StateMachineRole.Arn
      DefinitionString: !Sub
        - |-
          {
            "Comment": "A description of my state machine",
            "StartAt": "AddDragonFunction",
            "States": {
              "AddDragonFunction": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "${AddDragonArn}"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "File saved correctly?"
              },
              "File saved correctly?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.statusCode ",
                    "NumericEquals": 200,
                    "Next": "MainDragonFunction",
                    "Comment": "File saved: statusCode = 200"
                  }
                ],
                "Default": "File can't save"
              },
              "MainDragonFunction": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "${MainDragonArn}"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                  }
                ],
                "Next": "Success"
              },
              "Success": {
                "Type": "Succeed"
              },
              "File can't save": {
                "Type": "Fail"
              }
            }
          }
        - AddDragonArn: !GetAtt AddDragon.Arn
          MainDragonArn: !GetAtt MainDragon.Arn
# -----------------------  
  S3Bucket:
    Type: AWS::S3::Bucket
    Description: Creating Amazon S3 bucket from CloudFormation template
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-495-117"
    